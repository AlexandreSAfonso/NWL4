Para o Linux iremos utilizar o **[NodeSource](https://github.com/nodesource/distributions/blob/master/README.md)**, basta seguir esses passos:

- Verifique se você possui o **[curl](https://curl.haxx.se/)** instalado rodando no terminal o comando:

```bash
curl --version
```

Caso ele retorne a versão, pode pular para o próximo passo. Caso não, basta rodar o comando:

```bash
sudo apt install curl
```

- Com o **curl** instalado, execute o comando de instalação da versão LTS mais recente disponível:
    - Ubuntu

    ```bash
    curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
    sudo apt-get install -y nodejs
    ```

    - Debian (como root)

    ```json
    curl -sL https://deb.nodesource.com/setup_lts.x | bash -
    apt-get install -y nodejs
    ```

- Feche o terminal e abra novamente para as alterações fazerem efeito.

- Por fim, execute os seguintes comandos no terminal:
    node -v
    npm -v


Caso retorne as versões do Node e npm, sua instalação foi um sucesso.



Para instalar o Yarn 1 no Linux vamos começar configurando o repositório do **Yarn** executando:
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list


Instale utilizando o seguinte comando:
    sudo apt update && sudo apt install --no-install-recommends yarn


Adicione ao arquivo `~/.bashrc` (ou `~/.zshrc` caso você utilize o shell zsh) a seguinte linha: 
    export PATH="$PATH:`yarn global bin`"


Feche e abra o terminal novamente, em seguida rode o comando:
    yarn --version


Caso retorne a versão do Yarn (acima de 1.0, abaixo de 2.0), a instalação ocorreu com sucesso.


Adicionar o express ao projeto 
    yarn add express

Adicionar a dependencia exclusiva para desenvolvimento
    yarn add @types/express -D 

Alterar tsconfig.json mudando 
    "strict" para false

Incluir no package.json o trecho de código abaixo para fazer o servidor rodar

    "scripts":{
        "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts"
    },


Adicionar o TypeScript apenas para desenvolvimento
    yarn add typescript -D

Adicionar o TS node apenas para desenvolvimento
    yarn add ts-node-dev -D

Iniciar o servidor
    yarn dev


Aula 02

Formas de interagir com o Banco de dados
https://node-postgres.com/
http://knexjs.org/
https://typeorm.io/

Nesse projeto o typeorm foi utilizando
 criar dentro de src a pasta database
 criar dentro de src/database a pasta migrations
 criar na raiz o arquivo ormconfig.json e incluir dentro o código
{
    "type": "sqlite",
    "database": "./src/database/database.sqlite",
    "migrations": ["./src/database/migrations/**.ts"], //diretório onde rodar os Migradions
    "entities": [".src/models/**.ts"],
    "cli":{
        "migrationsDir": "./src/database/database/migrations" //diretório para criar os Migradions
    }
}

Criar uma entrada no arquivo package.json em "sripts, logo abaixo de "dev"
    "typeorm": "ts-node-dev node_modules/typeorm/cli.js"

No arquivo server.ts, colocar os imports 
    import 'reflect-metadata' //esse tem que ficar na primeira linha
    import "./database";


Criar a pasta databese dentro de src
Criar a pasta migration dentro de database
Dentro da pasta database, criar o arquivo index.ts com o conteúdo
    import { createConnection } from 'typeorm'

    createConnection();

Rode a aplicação para ver se o arquivo database.sqlite é criado sem erros


Criar o primeiro migration, terminal, digite yarn typeorm migration:create -n NomeDoMigration, ex:
    yarn typeorm migration:create -n CreateUsers

Verifique a estrutura de tabelas a ser criada, e monte o migration UP, conforme necessário.
Para o rollback crie a estrutura down no mesmo arquivo.
 * para rodar as migrations, use no console: "yarn typeorm migration:run"
 * para fazer rollback da ultima migration que ele rodou, use no console: "yarn typeorm migration:revert"

Para testar o SQLite, existe uma extensão sqlite ou um app chamado https://www.beekeeperstudio.io/


Criando a estrutura de Controllers
    Criar a pasta controllers dentro de src
    Criar o controller o arquivo UserController.ts
    Reformular o server.ts, para utilizar o controller

Criar o arquivo router.ts dentro de src

Criando a pasta models dentro de src
    Criar o arquivo User.ts dentro da pasta

Ajustar o tsconfig.json nos parâmetros
    "strictPropertyInitialization": false
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true, 

Adicionar a biblioteca uuid
    yarn add uuid
    yarn add @types/uuid